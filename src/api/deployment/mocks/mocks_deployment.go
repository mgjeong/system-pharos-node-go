// Automatically generated by MockGen. DO NOT EDIT!
// Source: deployment.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
)

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) Handle(w http.ResponseWriter, req *http.Request) {
	_m.ctrl.Call(_m, "Handle", w, req)
}

func (_mr *_MockCommandRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Handle", arg0, arg1)
}

// Mock of apiInnerCommand interface
type MockapiInnerCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockapiInnerCommandRecorder
}

// Recorder for MockapiInnerCommand (not exported)
type _MockapiInnerCommandRecorder struct {
	mock *MockapiInnerCommand
}

func NewMockapiInnerCommand(ctrl *gomock.Controller) *MockapiInnerCommand {
	mock := &MockapiInnerCommand{ctrl: ctrl}
	mock.recorder = &_MockapiInnerCommandRecorder{mock}
	return mock
}

func (_m *MockapiInnerCommand) EXPECT() *_MockapiInnerCommandRecorder {
	return _m.recorder
}

func (_m *MockapiInnerCommand) deploy(w http.ResponseWriter, req *http.Request) {
	_m.ctrl.Call(_m, "deploy", w, req)
}

func (_mr *_MockapiInnerCommandRecorder) deploy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "deploy", arg0, arg1)
}

func (_m *MockapiInnerCommand) app(w http.ResponseWriter, req *http.Request, appId string) {
	_m.ctrl.Call(_m, "app", w, req, appId)
}

func (_mr *_MockapiInnerCommandRecorder) app(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "app", arg0, arg1, arg2)
}

func (_m *MockapiInnerCommand) apps(w http.ResponseWriter, req *http.Request) {
	_m.ctrl.Call(_m, "apps", w, req)
}

func (_mr *_MockapiInnerCommandRecorder) apps(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "apps", arg0, arg1)
}

func (_m *MockapiInnerCommand) update(w http.ResponseWriter, req *http.Request, appId string) {
	_m.ctrl.Call(_m, "update", w, req, appId)
}

func (_mr *_MockapiInnerCommandRecorder) update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "update", arg0, arg1, arg2)
}

func (_m *MockapiInnerCommand) stop(w http.ResponseWriter, req *http.Request, appId string) {
	_m.ctrl.Call(_m, "stop", w, req, appId)
}

func (_mr *_MockapiInnerCommandRecorder) stop(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "stop", arg0, arg1, arg2)
}

func (_m *MockapiInnerCommand) start(w http.ResponseWriter, req *http.Request, appId string) {
	_m.ctrl.Call(_m, "start", w, req, appId)
}

func (_mr *_MockapiInnerCommandRecorder) start(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "start", arg0, arg1, arg2)
}

func (_m *MockapiInnerCommand) events(w http.ResponseWriter, req *http.Request, appId string) {
	_m.ctrl.Call(_m, "events", w, req, appId)
}

func (_mr *_MockapiInnerCommandRecorder) events(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "events", arg0, arg1, arg2)
}
