/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// InsertComposeFile mocks base method
func (m *MockCommand) InsertComposeFile(description string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "InsertComposeFile", description)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertComposeFile indicates an expected call of InsertComposeFile
func (mr *MockCommandMockRecorder) InsertComposeFile(description interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertComposeFile", reflect.TypeOf((*MockCommand)(nil).InsertComposeFile), description)
}

// GetAppList mocks base method
func (m *MockCommand) GetAppList() ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetAppList")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppList indicates an expected call of GetAppList
func (mr *MockCommandMockRecorder) GetAppList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppList", reflect.TypeOf((*MockCommand)(nil).GetAppList))
}

// GetApp mocks base method
func (m *MockCommand) GetApp(app_id string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetApp", app_id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp
func (mr *MockCommandMockRecorder) GetApp(app_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockCommand)(nil).GetApp), app_id)
}

// UpdateAppInfo mocks base method
func (m *MockCommand) UpdateAppInfo(app_id, description string) error {
	ret := m.ctrl.Call(m, "UpdateAppInfo", app_id, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppInfo indicates an expected call of UpdateAppInfo
func (mr *MockCommandMockRecorder) UpdateAppInfo(app_id, description interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInfo", reflect.TypeOf((*MockCommand)(nil).UpdateAppInfo), app_id, description)
}

// DeleteApp mocks base method
func (m *MockCommand) DeleteApp(app_id string) error {
	ret := m.ctrl.Call(m, "DeleteApp", app_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockCommandMockRecorder) DeleteApp(app_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockCommand)(nil).DeleteApp), app_id)
}

// GetAppState mocks base method
func (m *MockCommand) GetAppState(app_id string) (string, error) {
	ret := m.ctrl.Call(m, "GetAppState", app_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppState indicates an expected call of GetAppState
func (mr *MockCommandMockRecorder) GetAppState(app_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppState", reflect.TypeOf((*MockCommand)(nil).GetAppState), app_id)
}

// UpdateAppState mocks base method
func (m *MockCommand) UpdateAppState(app_id, state string) error {
	ret := m.ctrl.Call(m, "UpdateAppState", app_id, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppState indicates an expected call of UpdateAppState
func (mr *MockCommandMockRecorder) UpdateAppState(app_id, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppState", reflect.TypeOf((*MockCommand)(nil).UpdateAppState), app_id, state)
}

// UpdateAppEvent mocks base method
func (m *MockCommand) UpdateAppEvent(app_id, repo, tag, event string) error {
	ret := m.ctrl.Call(m, "UpdateAppEvent", app_id, repo, tag, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppEvent indicates an expected call of UpdateAppEvent
func (mr *MockCommandMockRecorder) UpdateAppEvent(app_id, repo, tag, event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppEvent", reflect.TypeOf((*MockCommand)(nil).UpdateAppEvent), app_id, repo, tag, event)
}
