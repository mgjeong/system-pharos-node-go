/*******************************************************************************
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/
// Code generated by MockGen. DO NOT EDIT.
// Source: src/controller/deployment/deploymentcontroller.go

// Package mock_deployment is a generated GoMock package.
package mock_deployment

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// DeployApp mocks base method
func (m *MockCommand) DeployApp(body string, query map[string]interface{}) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "DeployApp", body, query)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployApp indicates an expected call of DeployApp
func (mr *MockCommandMockRecorder) DeployApp(body, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployApp", reflect.TypeOf((*MockCommand)(nil).DeployApp), body, query)
}

// Apps mocks base method
func (m *MockCommand) Apps() (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Apps")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apps indicates an expected call of Apps
func (mr *MockCommandMockRecorder) Apps() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps", reflect.TypeOf((*MockCommand)(nil).Apps))
}

// App mocks base method
func (m *MockCommand) App(appId string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "App", appId)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// App indicates an expected call of App
func (mr *MockCommandMockRecorder) App(appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "App", reflect.TypeOf((*MockCommand)(nil).App), appId)
}

// UpdateAppInfo mocks base method
func (m *MockCommand) UpdateAppInfo(appId, body string) error {
	ret := m.ctrl.Call(m, "UpdateAppInfo", appId, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppInfo indicates an expected call of UpdateAppInfo
func (mr *MockCommandMockRecorder) UpdateAppInfo(appId, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInfo", reflect.TypeOf((*MockCommand)(nil).UpdateAppInfo), appId, body)
}

// DeleteApp mocks base method
func (m *MockCommand) DeleteApp(appId string) error {
	ret := m.ctrl.Call(m, "DeleteApp", appId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockCommandMockRecorder) DeleteApp(appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockCommand)(nil).DeleteApp), appId)
}

// StartApp mocks base method
func (m *MockCommand) StartApp(appId string) error {
	ret := m.ctrl.Call(m, "StartApp", appId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartApp indicates an expected call of StartApp
func (mr *MockCommandMockRecorder) StartApp(appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApp", reflect.TypeOf((*MockCommand)(nil).StartApp), appId)
}

// StopApp mocks base method
func (m *MockCommand) StopApp(appId string) error {
	ret := m.ctrl.Call(m, "StopApp", appId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopApp indicates an expected call of StopApp
func (mr *MockCommandMockRecorder) StopApp(appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApp", reflect.TypeOf((*MockCommand)(nil).StopApp), appId)
}

// HandleEvents mocks base method
func (m *MockCommand) HandleEvents(appId, body string) error {
	ret := m.ctrl.Call(m, "HandleEvents", appId, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvents indicates an expected call of HandleEvents
func (mr *MockCommandMockRecorder) HandleEvents(appId, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvents", reflect.TypeOf((*MockCommand)(nil).HandleEvents), appId, body)
}

// UpdateApp mocks base method
func (m *MockCommand) UpdateApp(appId string, query map[string]interface{}) error {
	ret := m.ctrl.Call(m, "UpdateApp", appId, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApp indicates an expected call of UpdateApp
func (mr *MockCommandMockRecorder) UpdateApp(appId, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockCommand)(nil).UpdateApp), appId, query)
}
