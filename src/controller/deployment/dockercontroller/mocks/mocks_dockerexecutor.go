/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/
// Automatically generated by MockGen. DO NOT EDIT!
// Source: DockerExecutor.go

// Package mock_dockercontroller is a generated GoMock package.
package mock_dockercontroller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDockerExecutorInterface is a mock of DockerExecutorInterface interface
type MockDockerExecutorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDockerExecutorInterfaceMockRecorder
}

// MockDockerExecutorInterfaceMockRecorder is the mock recorder for MockDockerExecutorInterface
type MockDockerExecutorInterfaceMockRecorder struct {
	mock *MockDockerExecutorInterface
}

// NewMockDockerExecutorInterface creates a new mock instance
func NewMockDockerExecutorInterface(ctrl *gomock.Controller) *MockDockerExecutorInterface {
	mock := &MockDockerExecutorInterface{ctrl: ctrl}
	mock.recorder = &MockDockerExecutorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDockerExecutorInterface) EXPECT() *MockDockerExecutorInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDockerExecutorInterface) Create(path string) error {
	ret := m.ctrl.Call(m, "Create", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDockerExecutorInterfaceMockRecorder) Create(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Create), path)
}

// Up mocks base method
func (m *MockDockerExecutorInterface) Up(path string) error {
	ret := m.ctrl.Call(m, "Up", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Up indicates an expected call of Up
func (mr *MockDockerExecutorInterfaceMockRecorder) Up(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Up), path)
}

// Down mocks base method
func (m *MockDockerExecutorInterface) Down(path string) error {
	ret := m.ctrl.Call(m, "Down", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Down indicates an expected call of Down
func (mr *MockDockerExecutorInterfaceMockRecorder) Down(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Down", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Down), path)
}

// DownWithRemoveImages mocks base method
func (m *MockDockerExecutorInterface) DownWithRemoveImages(path string) error {
	ret := m.ctrl.Call(m, "DownWithRemoveImages", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownWithRemoveImages indicates an expected call of DownWithRemoveImages
func (mr *MockDockerExecutorInterfaceMockRecorder) DownWithRemoveImages(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownWithRemoveImages", reflect.TypeOf((*MockDockerExecutorInterface)(nil).DownWithRemoveImages), path)
}

// Start mocks base method
func (m *MockDockerExecutorInterface) Start(path string) error {
	ret := m.ctrl.Call(m, "Start", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDockerExecutorInterfaceMockRecorder) Start(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Start), path)
}

// Stop mocks base method
func (m *MockDockerExecutorInterface) Stop(path string) error {
	ret := m.ctrl.Call(m, "Stop", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockDockerExecutorInterfaceMockRecorder) Stop(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Stop), path)
}

// Pause mocks base method
func (m *MockDockerExecutorInterface) Pause(path string) error {
	ret := m.ctrl.Call(m, "Pause", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause
func (mr *MockDockerExecutorInterfaceMockRecorder) Pause(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Pause), path)
}

// Unpause mocks base method
func (m *MockDockerExecutorInterface) Unpause(path string) error {
	ret := m.ctrl.Call(m, "Unpause", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpause indicates an expected call of Unpause
func (mr *MockDockerExecutorInterfaceMockRecorder) Unpause(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpause", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Unpause), path)
}

// Pull mocks base method
func (m *MockDockerExecutorInterface) Pull(path string) error {
	ret := m.ctrl.Call(m, "Pull", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull
func (mr *MockDockerExecutorInterfaceMockRecorder) Pull(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Pull), path)
}

// Ps mocks base method
func (m *MockDockerExecutorInterface) Ps(path string, args ...string) (string, error) {
	varargs := []interface{}{path}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ps", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ps indicates an expected call of Ps
func (mr *MockDockerExecutorInterfaceMockRecorder) Ps(path interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{path}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ps", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Ps), varargs...)
}

// Inspect mocks base method
func (m *MockDockerExecutorInterface) Inspect(IdOrName string) (string, error) {
	ret := m.ctrl.Call(m, "Inspect", IdOrName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect
func (mr *MockDockerExecutorInterfaceMockRecorder) Inspect(IdOrName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockDockerExecutorInterface)(nil).Inspect), IdOrName)
}

// GetImageDigest mocks base method
func (m *MockDockerExecutorInterface) GetImageDigest(imageName string) (string, error) {
	ret := m.ctrl.Call(m, "GetImageDigest", imageName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageDigest indicates an expected call of GetImageDigest
func (mr *MockDockerExecutorInterfaceMockRecorder) GetImageDigest(imageName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageDigest", reflect.TypeOf((*MockDockerExecutorInterface)(nil).GetImageDigest), imageName)
}
