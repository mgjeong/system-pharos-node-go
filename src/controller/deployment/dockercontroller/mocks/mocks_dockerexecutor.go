// Automatically generated by MockGen. DO NOT EDIT!
// Source: dockerexecutor.go

package mock_dockercontroller

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) Create(path string) error {
	ret := _m.ctrl.Call(_m, "Create", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockCommand) Up(path string) error {
	ret := _m.ctrl.Call(_m, "Up", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Up(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Up", arg0)
}

func (_m *MockCommand) Down(path string) error {
	ret := _m.ctrl.Call(_m, "Down", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Down(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Down", arg0)
}

func (_m *MockCommand) DownWithRemoveImages(path string) error {
	ret := _m.ctrl.Call(_m, "DownWithRemoveImages", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) DownWithRemoveImages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DownWithRemoveImages", arg0)
}

func (_m *MockCommand) Start(path string) error {
	ret := _m.ctrl.Call(_m, "Start", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Start(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0)
}

func (_m *MockCommand) Stop(path string) error {
	ret := _m.ctrl.Call(_m, "Stop", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Stop(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop", arg0)
}

func (_m *MockCommand) Pause(path string) error {
	ret := _m.ctrl.Call(_m, "Pause", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Pause(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pause", arg0)
}

func (_m *MockCommand) Unpause(path string) error {
	ret := _m.ctrl.Call(_m, "Unpause", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Unpause(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unpause", arg0)
}

func (_m *MockCommand) Pull(path string) error {
	ret := _m.ctrl.Call(_m, "Pull", path)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Pull(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pull", arg0)
}

func (_m *MockCommand) Ps(path string, args ...string) (string, error) {
	_s := []interface{}{path}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Ps", _s...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) Ps(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ps", _s...)
}

func (_m *MockCommand) Inspect(IdOrName string) (string, error) {
	ret := _m.ctrl.Call(_m, "Inspect", IdOrName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) Inspect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Inspect", arg0)
}

func (_m *MockCommand) GetImageDigest(imageName string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetImageDigest", imageName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetImageDigest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetImageDigest", arg0)
}
