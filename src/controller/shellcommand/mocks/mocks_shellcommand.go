/*******************************************************************************
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/
// Automatically generated by MockGen. DO NOT EDIT!
// Source: shellcommand.go

package mock_shellcommand

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) ExecuteCommand(command string, args ...string) (string, error) {
	_s := []interface{}{command}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ExecuteCommand", _s...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) ExecuteCommand(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteCommand", _s...)
}

// Mock of shellInnerInterface interface
type MockshellInnerInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockshellInnerInterfaceRecorder
}

// Recorder for MockshellInnerInterface (not exported)
type _MockshellInnerInterfaceRecorder struct {
	mock *MockshellInnerInterface
}

func NewMockshellInnerInterface(ctrl *gomock.Controller) *MockshellInnerInterface {
	mock := &MockshellInnerInterface{ctrl: ctrl}
	mock.recorder = &_MockshellInnerInterfaceRecorder{mock}
	return mock
}

func (_m *MockshellInnerInterface) EXPECT() *_MockshellInnerInterfaceRecorder {
	return _m.recorder
}

func (_m *MockshellInnerInterface) executeCommand(name string, arg ...string) {
	_s := []interface{}{name}
	for _, _x := range arg {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "executeCommand", _s...)
}

func (_mr *_MockshellInnerInterfaceRecorder) executeCommand(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "executeCommand", _s...)
}

func (_m *MockshellInnerInterface) getOutput() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "getOutput")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockshellInnerInterfaceRecorder) getOutput() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getOutput")
}
