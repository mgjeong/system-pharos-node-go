// Code generated by MockGen. DO NOT EDIT.
// Source: src/controller/notification/apps/apps.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// SubscribeEvent mocks base method
func (m *MockCommand) SubscribeEvent(body string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "SubscribeEvent", body)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvent indicates an expected call of SubscribeEvent
func (mr *MockCommandMockRecorder) SubscribeEvent(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvent", reflect.TypeOf((*MockCommand)(nil).SubscribeEvent), body)
}

// SendNotification mocks base method
func (m *MockCommand) SendNotification(appId, serviceName, cid, event string) {
	m.ctrl.Call(m, "SendNotification", appId, serviceName, cid, event)
}

// SendNotification indicates an expected call of SendNotification
func (mr *MockCommandMockRecorder) SendNotification(appId, serviceName, cid, event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockCommand)(nil).SendNotification), appId, serviceName, cid, event)
}

// UnsubscribeEvent mocks base method
func (m *MockCommand) UnsubscribeEvent(body string) error {
	ret := m.ctrl.Call(m, "UnsubscribeEvent", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeEvent indicates an expected call of UnsubscribeEvent
func (mr *MockCommandMockRecorder) UnsubscribeEvent(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeEvent", reflect.TypeOf((*MockCommand)(nil).UnsubscribeEvent), body)
}
